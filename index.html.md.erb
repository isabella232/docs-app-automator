---
title: Installing App Automator for PCF
owner: CF EATs
---

<strong><%= modified_date %></strong>

<p class="note warning"><b>Warning</b>: App Automator v1.0 is Beta. It is not intended for use in production environments. It is governed by the Beta Components section in the [Pivotal Software End User License Agreement](https://network.pivotal.io/legal_documents/pivotal_software_eula).</p>

This topic provides an introduction to App Automator for Pivotal Cloud Foundry (PCF) and describes how to install the App Automator for PCF plugin.

## <a id='about'></a> About App Automator for PCF

App Automator executes automated actions against apps based on triggers. For example, developers can define a schedule for App Automator to automatically scale an app up or down.

Operators can install App Automator on one or more spaces in their PCF deployment. On each space, one or more App Automator manifest files define the triggers, actions, and scope for App Automator. For more information about App Automator manifest files, including information about triggers, actions, and scope, see [Configuring App Automator for PCF](./using.html). 

## Prerequisites

The following are prerequisites for installing the App Automator for PCF plugin:

  - Download the App Automator for PCF plugin from PivNet.
  - App Automator requires Pivotal Application Service (PAS) 2.2 or later. For more information about upgrading PAS, see [Upgrading PAS and Other Pivotal Cloud Foundry Products](https://docs.pivotal.io/pivotalcf/2-4/customizing/upgrading-products.html).

## <a id='install'></a> Install the App Automator for PCF Plugin

The following section describes how to install the App Automator for PCF plugin. After installing the plugin, operators can install App Automator on or more spaces in their PCF deployment.

To install the App Automator for PCF plugin, run the following command in the cf CLI:

<pre class="terminal">cf install-plugin PATH-TO-PLUGIN</pre>

Where `PATH-TO-PLUGIN` is the path to the App Automator for PCF plugin you downloaded.

## <a id='user-credentials'></a> Configure App Automator for PCF User Credentials

App Automator requires Space Developer user credentials on each PCF deployment space on which it is installed. Pivotal recommends configuring unique credentials for each space.  

For more information about assigning Space Developer permissions to a user in PCF, see [Orgs, Spaces, Roles, and Permissions](https://docs.pivotal.io/pivotalcf/concepts/roles.html). 

To configure space-wide user credentials for App Automator, do one of the following:

- Create new user credentials. For more information, see [Create New User Credentials](#new-user).

- Configure existing user credentials. For more information, see [Configure Existing User Credentials](#existing-user).

### <a id='new-user'></a> Create New User Credentials

This section describes how to create new user credentials for App Automator. 

To create new user credentials, navigate to the desired PCF deployment space and run the following command:

<pre class="terminal">cf install-app-automator -p MY-PASSWORD</pre>

Where `MY-PASSWORD` is a password for the new App Automator user.
</br>
</br>
App Automator generates a username for the user and saves the credentials as a user-provided service called `pvtl-app-automator-credentials`. The username is `pvtl_appauto_SPACE_GUID`, where `SPACE_GUID` is the GUID of the space. 

### <a id='existing-user'></a> Configure Existing User Credentials

This section describes how to use an existing user with Space Developer permissions for App Automator by saving the desired user credentials in a user-provided service called `pvtl-app-automator-credentials`.

For more information about user-provided services, see [User-Provided Service](https://docs.pivotal.io/tiledev/user-provided.html).

To configure existing user credentials for App Automator, navigate to the desired space in your PCF deployment and run the following command: 

<pre class="terminal">cf create-user-provided-service pvtl-app-automator-credentials\
-p '{"username":"MY-USERNAME", "password": "MY-PASSWORD"}'</pre>

Where:

* `MY-USERNAME` is the username for the Space Developer user.
* `MY-PASSWORD` is the password for the Space Developer user.