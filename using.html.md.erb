---
title: Configuring App Automator for PCF
owner: CF EATs
---

<strong><%= modified_date %></strong>

This topic describes how to configure user credentials for accessing App Automator for Pivotal Cloud Foundry (PCF). It also describes how to define and configure triggers and actions in an App Automator for PCF manifest file.

## <a id='user-credentials'></a> Configure App Automator for PCF User Credentials

App Automator for PCF requires Space Developer user credentials on each PCF deployment space on which it is installed. Pivotal recommends configuring unique credentials for each space.  

For more information about assigning a user Space Developer permissions, see [Orgs, Spaces, Roles, and Permissions](../../pivotalcf/concepts/roles.html). 

To configure user credentials for App Automator for PCF, do one of the following:

- Create new user credentials. For more information, see [Create New User Credentials](#new-user).

- Configure existing user credentials. For more information, see [Configure Existing User Credentials](#existing-user).

### <a id='new-user'></a> Create New User Credentials

This section describes how to create new space-wide user credentials with Space Developer permissions for App Automator for PCF. 

To create new user credentials, navigate to the desired space in your PCF deployment and run the following command:

<pre class="terminal">cf install-app-automator -p MY-PASSWORD</pre>

Where `MY-PASSWORD` is a password for the new App Automator for PCF user.

App Automator for PCF automatically generates a username for the new user. The username is `pvtl_appauto_SPACE_GUID`, where `SPACE_GUID` is the GUID of the space on which App Automator for PCF is installed.  

### <a id='existing-user'></a> Configure Existing User Credentials

This section describes how to configure existing space-wide user credentials for App Automator for PCF. To use existing credentials for App Automator for PCF, save the desired credentials in a new user-provided service. For more information about user-provided services, see [User-Provided Service](../../tiledev/2-4/user-provided.html).

<p class='note'><b>Note</b>: The space-wide user must have Space Developer permissions. For more information about configuring roles and permissions in PCF, see <a href="../../pivotalcf/concepts/roles.html">Orgs, Spaces, Roles, and Permissions</a>.</p>

To configure existing user credentials for App Automator for PCF, do the following:

1. Navigate to the desired space in your PCF deployment and run the following command to install App Automator for PCF:

    <pre class="terminal">cf install-app-automator</pre>

1. Run the following command to add the existing user credentials to a user-provided service called `pvtl-app-automator-credentials`: 

    <pre class="terminal">cf create-user-provided-service pvtl-app-automator-credentials\
    -p '{"username":"MY-USERNAME", "password": "MY-PASSWORD"}'</pre>

    Where:
    * `MY-USERNAME` is the username for the space-wide Space Developer user.
    * `MY-PASSWORD` is the password for the space-wide Space Developer user.

## <a id='triggers-actions'></a> Configure App Automator for PCF Manifest File

App Automator for PCF executes automated actions against an app when the conditions of a given trigger are met. App Automator includes types of triggers and actions that developers can define in an App Automator manifest file.

### <a id='triggers'></a> About Triggers

The following table describes App Automator for PCF triggers.

<table>
  <tr>
    <th width="20%">Name</th>
    <th width="30%">Description</th>
    <th width="20%">Syntax</th>
    <th width="30%">Example</th>
  </tr>
  <tr>    
    <td><code>schedule</code></td>
    <td>Set a regular schedule for App Automator to execute an action.</td>
    <td>Cron</td>
    <td><code>@every 3m</code> triggers an associated action every three minutes.</td>
  </tr>
</table>
 
### <a id='actions'></a> About Actions

The following table describes App Automator for PCF actions.

<table>
  <tr>
    <th width="20%">Name</th>
    <th width="30%">Description</th>
    <th width="20%">Syntax</th>
    <th width="30%">Example</th> 
  </tr>
  <tr>    
    <td><code>scale_up</code></td>
    <td>Scale an app up relative to its current number of instances.</td>
    <td></td>
    <td></td>
  </tr> 
  <tr>
    <td><code>scale_down</code></td>
    <td>Scale an app up relative to its current number of instances.</td>
    <td></td>
    <td></td>
  </tr>
  <tr>    
    <td><code>scale_to</code></td>
    <td>Scale an app up or down to a specific number of intances.</td>
    <td></td>
    <td></td>
  </tr>
  <tr> 
    <td><code>scale_by</code></td>
    <td>Scale an app up or down by a specific number of intances.</td>
    <td></td>
    <td></td>
  </tr>  
  <tr>    
    <td><code>cf_task</code></td>
    <td>Execute a cf_task against an app.</td>
    <td></td>
    <td></td>
  </tr>
</table> 

### <a id='example'></a> Example Manifest File 

The example YAML file below executes a `cf_task` action every 15 minutes. The action runs a command and sets the memory and disk quota for the specified app.

<pre>
actions:
 my-action:
   app: MY-APP
   type: cf_task
   config:
     command: "MY COMMAND"
     memory_in_mb: 4
     disk_quota_in_mb: 8

triggers:
 every_15m:
   type: schedule
   action: my-action
   expression: "@every 15m"
</pre>

Where:

- `MY-APP` is the name of the app against which App Automator executes the action.
- `MY COMMAND` is a command associated with the `cf_task` action.
- `my-action` is the name of the action.  

### <a id='apply'></a> Apply Changes to the Manifest File

To configure App Automator for PCF with the triggers and actions defined in the manifest file, run the following command:

<pre class="terminal">cf configure-app-automator MY-MANIFEST-FILE</pre>

Where:

  - `MY-MANIFEST-FILE` is the name of the App Automator manifest YAML file.