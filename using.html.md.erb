---
title: Configuring App Automator for PCF
owner: CF EATs
---

<strong><%= modified_date %></strong>

This topic describes how to define and configure triggers, actions, and scope in an App Automator for Pivotal Cloud Foundry (PCF) manifest file.

## <a id='configure-manifest'></a> Configure an App Automator for PCF Manifest File

This section describes the format and syntax for triggers, actions, and scope in App Automator manifest files.

The following are the components of an App Automator manifest file:

* **Triggers**: When the conditions of a trigger are met, App Automator executes an associated action. For more information, see [About App Automator for PCF Triggers](#triggers).

* **Actions**: App Automator executes actions, such as scaling an app to a specific number of instances, based on an associated trigger. For more information, see [About App Automator for PCF Actions](#actions).

* **Scope**: Scope defines the app or group of apps to which the manifest file applies. For more information, see [About App Automator for PCF Scope](#scope).

### <a id='triggers'></a> About App Automator for PCF Triggers

This section describes the types of App Automator triggers as well as the YAML formatting for each trigger type.

The following are the types of App Automator triggers:

- `schedule`: Set a regular schedule for App Automator to execute an action against an app. For more information, see [Example schedule Trigger](#schedule).

#### <a id="schedule"></a> Example schedule Trigger

`schedule` triggers set a regular schedule for App Automator to execute an action against an app.

The following is an example of a `schedule` trigger that initiates an action `my-action` every three minutes.

<pre>
  my-schedule-trigger:
    type: schedule
    action: my-action
    expression: "@every 3m"
</pre> 

Where:

* `my-schedule-trigger` is a name for the trigger. 
* `type` is a required parameter that defines the type of trigger. The value for the `type` parameter of a trigger is always `schedule`.
* `action`: Is a required parameter that defines the action App Automator executes when the conditions of the trigger are met.
* `expression` is a required parameter that defines when App Automator executes the defined `action`. The syntax for the `expression` parameter is a cron expression.
 
### <a id='actions'></a> About App Automator for PCF Actions

This section describes the types of App Automator actions as well as the YAML formatting for each action type.

The following are the types of App Automator actions:

- `scale_to`: Scale an app up or down to a specific number of intances. For more information, see [Example scale_to Action](#scale_to).
- `scale_by`: Scale an app up or down by a specific number of intances. For more information, see [Example scale_by Action](#scale_by).
- `cf_task`: Executes a `cf_task`. For more information, see [Example cf_task Action](#cf_task).

#### <a id='scale_to'></a> Example scale_to Action

`scale_to` actions scale an app up or down to a specific number of intances.

The following is an example of a `scale_to` action that automatically scales an app up or down to eight instances.

<pre>
  my-scale-to-action:
    app: my-app
    type: scale_to
    config:
      instances: 8
</pre> 

Where:

* `my-scale-to-action` is a name for the action. 
* `app` is a required parameter that lists the name of the app against which App Automator executes the action. For example, `my-app`.
* `type` is a required parameter that defines the type of action. The possible values for `type` are `scale_to`, `scale_by`, and `cf_task`.
* `instances` is a required parameter that defines the number of instances to which App Automator scales the app. The value for the `instances` parameter can be any positive integer.

#### <a id="scale_by"></a> Example scale_by Action

`scale_by` actions scale and app up or down by a specific number of instances.

The following is an example of a `scale_by` action that automatically scales an app up by 2 instances.

<pre>
  my-scale-by-action:
    app: my-app
    type: scale_by
    config:
      factor: 2
      max: 8
      min:
</pre> 

Where:

* `my-scale-by-action` is a name for the action. 
* `app` is a required parameter that lists the name of the app against which App Automator executes the action. For example, `my-app`.
* `type` is a required parameter that defines the type of action. The possible values for `type` are `scale_to`, `scale_by`, and `cf_task`.
* `factor` is a required parameter that defines the number of instances by which App Automator scales up the app. The value for the `instances` parameter can be any positive or negative, non-zero integer.
* `max` is an optional parameter that sets a maximum number of app instances.
* `min` is an optional parameter that sets a minimum number of app instances.

#### <a id="cf_task"></a> Example cf_task Action

`cf_task` actions execute a `cf_task` on an app. They can also optionally set app memory and disk quota.

<pre>
 my-cf-task-action:
   app: my-app
   type: cf_task
   config:
     command: "MY-COMMAND"
     memory_in_mb: 4
     disk_quota_in_mb: 8
</pre>

Where:

* `my-cf-task-action` is a name for the action. 
* `app` is a required parameter that lists the name of the app on which App Automator runs the command.
* `type` is a required parameter that defines the type of action. The possible values for `type` are `scale_to`, `scale_by`, and `cf_task`.
* `command` is a required parameter that defines a `cf_task` command to execute.
* `memory_in_mb` is an optional parameter that sets the memory for the in MB for the app listed in the `app` parameter.
* `disk_quota_in_mb` is an optional parameter that defines the disk quota in MB for the app listed in the `app` parameter.  

### <a id="scope"></a> About App Automator for PCF Scope

Scope is a required field that defines the app or group of apps to which the App Automator manifest file applies. This allows developers to apply triggers and actions to specific groups of apps within a PCF deployment space. 

For example, in the manifest file below, the apps `my-first-app` and my `my-second-app` are apps in a service. The scope `my-service` applies the trigger and action defined in the file to `my-first-app` and `my-second-app`, rather than to all apps in the space on which App Automator is installed.

<pre>
scope: my-service

actions:
 scale-by-action:
    app: my-first-app
    type: scale_by
    config:
      factor: -2
      min: 1
  scale-by-action:
    app: my-second-app
    type: scale_by
    config:
      factor: 1
      max: 10     

triggers:
 every_15m:
   type: schedule
   action: scale-by-action
   expression: "@every 15m"
</pre>

### <a id='example'></a> Example Manifest File 

The example App Automator manifest file below executes a `scale_by` action every 15 minutes on the app `my-app`. The action scales the app down by 2 instances. The action also defines that the minimum number of instances to which App Automator can scale the app is one instance. In this example, the scope of the manifest file is a single app, `my-app`.  

<pre>
scope: my-app

actions:
 scale-by-action:
    app: my-app
    type: scale_by
    config:
      factor: -2
      min: 1

triggers:
 every_15m:
   type: schedule
   action: scale-by-action
   expression: "@every 15m"
</pre>

Where:

- `my-app` is the name of the app against which App Automator executes the action.
- `scale-by-action` is the name of the action.  

### <a id='apply'></a> Apply Changes to the Manifest File

To configure App Automator with the triggers and actions defined in the manifest file, run the following command:

<pre class="terminal">cf configure-app-automator manifest-file</pre>

Where:

  - `manifest-file` is the name of the App Automator manifest YAML file.