---
title: Configuring App Automator for PCF
owner: CF EATs
---

<strong><%= modified_date %></strong>

<p class="note warning"><b>Warning</b>: App Automator v1.0 is Beta. It is not intended for use in production environments. It is governed as a Beta Component as defined in the <a href="https://network.pivotal.io/legal_documents/pivotal_software_eula">Pivotal Software End User License Agreement</a>.</p>

This topic describes how to define and configure triggers, actions, and scope in one or more App Automator for Pivotal Cloud Foundry (PCF) manifest files. It also describes how to configure App Automator to use the triggers, actions, and scope defined in the manifest files.

The following are the components of an App Automator manifest file:

* **Triggers**: Triggers define the schedule for App Automator to execute an associated action. For more information about `schedule` triggers, see [About App Automator for PCF Triggers](#triggers).

* **Actions**: App Automator executes actions, such as scaling an app to a specific number of instances, based on an associated trigger. For more information, see [About App Automator for PCF Actions](#actions).

* **Scope**: Scope defines the app or group of apps to which the manifest file applies. For more information, see [About App Automator for PCF Scope](#scope).

## <a id='triggers'></a> About App Automator for PCF Triggers

This section describes the `schedule` App Automator trigger as well as its YAML formatting.

The App Automator `schedule` trigger sets a regular schedule for App Automator to execute an action against an app.

The following is an example of a `schedule` trigger that can appear in an App Automator manifest file. The example shows the YAML formatting of a `schedule` trigger that initiates an action `my-action` every three minutes.

<pre>
  my-schedule-trigger:
    type: schedule
    action: my-action
    expression: "@every 3m"
</pre> 

Where:

* `my-schedule-trigger` is a name for the trigger. 
* `type` is a required parameter that defines the type of trigger. The value for the `type` parameter of a trigger is always `schedule`.
* `action`: Is a required parameter that defines the action App Automator executes when the conditions of the trigger are met.
* `expression` is a required parameter that defines the schedule for App Automator to execute the defined `action`. The syntax for the `expression` parameter is a cron expression. For details about cron expression formatting, see [Package cron](https://godoc.org/github.com/robfig/cron).
 
## <a id='actions'></a> About App Automator for PCF Actions

This section describes the types of App Automator actions as well as the YAML formatting for each action type.

The following are the types of App Automator actions:

- `scale_to`: Scale an app up or down to a specific number of instances. For more information, see [Example scale_to Action](#scale_to).
- `scale_by`: Scale an app up or down by a specific number of instances. For more information, see [Example scale_by Action](#scale_by).
- `cf_task`: Runs a `cf_task` against an app. For more information, see [Example cf_task Action](#cf_task).

### <a id='scale_to'></a> Example scale_to Action

`scale_to` actions scale an app up or down to a specific number of instances.

The following is an example of a `scale_to` action that can appear in an App Automator manifest file. The example shows the YAML formatting of a `scale_to` action that automatically scales an app up or down to eight instances.

<pre>
  my-scale-to-action:
    app: my-app
    type: scale_to
    config:
      instances: 8
</pre> 

Where:

* `my-scale-to-action` is a name for the action. 
* `app` is a required parameter that lists the name of the app that App Automator scales.
* `type` is a required parameter that defines the action type.
* `instances` is a required parameter that defines the number of instances to which App Automator scales the app. The value for the `instances` parameter can be any positive integer.

### <a id="scale_by"></a> Example scale_by Action

`scale_by` actions scale an app up or down by a specific number of instances.

The following is an example of a `scale_by` action that can appear in an App Automator manifest file. The example shows the YAML formatting of a `scale_by` action that automatically scales an app up by 2 instances.

<pre>
  my-scale-by-action:
    app: my-app
    type: scale_by
    config:
      factor: 2
      max: 8
      min:
</pre> 

Where:

* `my-scale-by-action` is a name for the action. 
* `app` is a required parameter that lists the name of the app that App Automator scales.
* `type` is a required parameter that defines the action type.
* `factor` is a required parameter that defines the number of instances by which App Automator scales the app. The value for the `factor` parameter can be any positive or negative, non-zero integer.
* `max` is an optional parameter that sets a maximum number of app instances.
* `min` is an optional parameter that sets a minimum number of app instances.

### <a id="cf_task"></a> Example cf_task Action

`cf_task` actions run a Cloud Foundry task against an app. For example, a `cf_task` action can run a script that returns the total number of new users for an app. 

`cf_task` actions create a container in which to run the task. Developers can set the memory and disk quota for this container as part of the definition for the `cf_task` action.

For more information about Cloud Foundry tasks, see [Running Tasks](https://docs.pivotal.io/pivotalcf/2-4/devguide/using-tasks.html). 

The following is an example of a `cf_task` action that can appear in an App Automator manifest file. The example shows the YAML formatting of a `cf_task` action that runs a task aginst an app. The action runs the task on a container with a memory of 4 MB and a disk quota of 8 MB.

<pre>
 my-cf-task-action:
   app: my-app
   type: cf_task
   config:
     command: "MY-COMMAND"
     memory_in_mb: 4
     disk_quota_in_mb: 8
</pre>

Where:

* `my-cf-task-action` is a name for the action. 
* `app` is a required parameter that lists the name of the app on which App Automator runs the command.
* `type` is a required parameter that defines the type of action.
* `command` is a required parameter that lists the `cf_task` command that App Automator runs.
* `memory_in_mb` is an optional parameter that sets the memory in MB for the container on which App Automator runs the task.
* `disk_quota_in_mb` is an optional parameter that sets the disk quota in MB for the container on which App Automator runs the task.  

## <a id="scope"></a> About App Automator for PCF Scope

Scope is a required field that defines the app or group of apps to which the App Automator manifest file applies. This allows developers to apply triggers and actions to one or more groups of apps within a PCF deployment space. 

For example, in the manifest file below, the apps `my-first-app` and my `my-second-app` are apps in a service. The scope `my-service` applies the trigger and action defined in the file to `my-first-app` and `my-second-app`, rather than to all apps in the space on which App Automator is installed.

<pre>
scope: my-service

actions:
 scale-by-action:
    app: my-first-app
    type: scale_by
    config:
      factor: -2
      min: 1
  scale-by-action:
    app: my-second-app
    type: scale_by
    config:
      factor: 1
      max: 10     

triggers:
 every_15m:
   type: schedule
   action: scale-by-action
   expression: "@every 15m"
</pre>

<p class="note"><b>Note</b>: Each App Automator manifest file can have a single scope. To create more than one scope within a space, add additional manifest files.</p>

## <a id='example'></a> Example Manifest File 

The example App Automator manifest file below executes a `scale_by` action every 15 minutes on the app, `my-app`. The action scales the app down by 2 instances. The action also defines that the minimum number of instances to which App Automator can scale `my-app` is one instance. 

In this example, `my-app` is the only app included in the scope of the manifest file. To illustrate this, the label for scope is `one-app`.

<pre>
scope: one-app

actions:
 scale-by-action:
    app: my-app
    type: scale_by
    config:
      factor: -2
      min: 1

triggers:
 every_15m:
   type: schedule
   action: scale-by-action
   expression: "@every 15m"
</pre> 

## <a id='apply'></a> Configure App Automator for PCF with a Manifest File

After creating a manifest file, configure App Automator to apply the triggers, actions, and scope defined in the manifest file.

To configure App Automator with a manifest file, run the following command:

<pre class="terminal">cf configure-app-automator manifest-file</pre>

Where `manifest-file` is the name of the App Automator manifest YAML file.